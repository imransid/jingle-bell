apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
 apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

react {
   }

def enableProguardInReleaseBuilds = false

def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.jinglebell"
    defaultConfig {
        applicationId "com.jinglebell"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode generateVersionCode()
        versionName generateVersionName()
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

private Integer generateVersionCode() {
    return rootProject.ext.minSdkVersion * 10000000 + 
           project.env.get("MAJOR_VERSION").toInteger() * 10000 + 
           project.env.get("MINOR_VERSION").toInteger() * 100 + 
           project.env.get("PATCH_VERSION").toInteger() * 1 + 
           (project.env.get("RELEASE_NUMBER") ?: 0) * 1000000
}


private String generateVersionName() {
    String versionName = "${project.env.get("MAJOR_VERSION")}.${project.env.get("MINOR_VERSION")}.${project.env.get("PATCH_VERSION")}"
    
    if(project.env.get("PRE_RELEASE") != null && !project.env.get("PRE_RELEASE").isEmpty()) {
        versionName = versionName + "-" + project.env.get("PRE_RELEASE")
    }
    
    if (project.env.get("RELEASE_NUMBER") != null) {
        versionName = versionName + "." + project.env.get("RELEASE_NUMBER")
    }
    
    return versionName
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation("com.facebook.react:flipper-integration")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)


// sentry
apply from: "../../node_modules/@sentry/react-native/sentry.gradle"
// React Native vector icon
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

// oioipipoiopiop


// apply plugin: "com.android.application"
// apply plugin: "com.facebook.react"
// apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
// apply plugin: "kotlin-android"

// /**
//  * This is the configuration block to customize your React Native Android app.
//  * By default you don't need to apply any configuration, just uncomment the lines you need.
//  */
// react {
//     /* Folders */
//     //   The root of your project, i.e. where "package.json" lives. Default is '..'
//     // root = file("../")
//     //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
//     // reactNativeDir = file("../node_modules/react-native")
//     //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
//     // codegenDir = file("../node_modules/@react-native/codegen")
//     //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
//     // cliFile = file("../node_modules/react-native/cli.js")

//     /* Variants */
//     //   The list of variants to that are debuggable. For those we're going to
//     //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
//     //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
//     // debuggableVariants = ["liteDebug", "prodDebug"]

//     /* Bundling */
//     //   A list containing the node command and its flags. Default is just 'node'.
//     // nodeExecutableAndArgs = ["node"]
//     //
//     //   The command to run when bundling. By default is 'bundle'
//     // bundleCommand = "ram-bundle"
//     //
//     //   The path to the CLI configuration file. Default is empty.
//     // bundleConfig = file(../rn-cli.config.js)
//     //
//     //   The name of the generated asset file containing your JS bundle
//     // bundleAssetName = "MyApplication.android.bundle"
//     //
//     //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
//     // entryFile = file("../js/MyApplication.android.js")
//     //
//     //   A list of extra flags to pass to the 'bundle' commands.
//     //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
//     // extraPackagerArgs = []

//     /* Hermes Commands */
//     //   The hermes compiler command to run. By default it is 'hermesc'
//     // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
//     //
//     //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
//     // hermesFlags = ["-O", "-output-source-map"]
// }

// /**
//  * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
//  */
// def enableProguardInReleaseBuilds = false

// /**
//  * The preferred build flavor of JavaScriptCore (JSC)
//  *
//  * For example, to use the international variant, you can use:
//  * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
//  *
//  * The international variant includes ICU i18n library and necessary data
//  * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
//  * give correct results when using with locales other than en-US. Note that
//  * this variant is about 6MiB larger per architecture than default.
//  */
// def jscFlavor = 'org.webkit:android-jsc:+'

// android {
//     ndkVersion rootProject.ext.ndkVersion

//     compileSdkVersion rootProject.ext.compileSdkVersion

//     namespace "com.nidleqms"
//     defaultConfig {
//         applicationId "com.nidleqms"
//         minSdkVersion rootProject.ext.minSdkVersion
//         targetSdkVersion rootProject.ext.targetSdkVersion
//         versionCode generateVersionCode()
//         versionName generateVersionName()
//     }
//     signingConfigs {
//         debug {
//             storeFile file('debug.keystore')
//             storePassword 'android'
//             keyAlias 'androiddebugkey'
//             keyPassword 'android'
//         }
//     }
//     buildTypes {
//         debug {
//             signingConfig signingConfigs.debug
//         }
//         release {
//             // Caution! In production, you need to generate your own keystore file.
//             // see https://reactnative.dev/docs/signed-apk-android.
//             signingConfig signingConfigs.debug
//             minifyEnabled enableProguardInReleaseBuilds
//             proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//             // Update the APK name for release builds
//              // Update the APK name for release builds
//             applicationVariants.all { variant ->
//                 variant.outputs.all { output ->
//                     // Check if variant has flavors before accessing them
//                     def flavor = variant.productFlavors.size() > 0 ? variant.productFlavors[0].name : ""

//                     // Modify the APK name format as per your requirements
//                     outputFileName = "${flavor}${variant.versionName}-release.apk"
//                 }
//             }
//         }
//     }

// }

// private Integer generateVersionCode() {
//     return rootProject.ext.minSdkVersion * 10000000 + 
//            project.env.get("MAJOR_VERSION").toInteger() * 10000 + 
//            project.env.get("MINOR_VERSION").toInteger() * 100 + 
//            project.env.get("PATCH_VERSION").toInteger() * 1 + 
//            (project.env.get("RELEASE_NUMBER") ?: 0) * 1000000
// }


// private String generateVersionName() {
//     String versionName = "${project.env.get("MAJOR_VERSION")}.${project.env.get("MINOR_VERSION")}.${project.env.get("PATCH_VERSION")}"
    
//     if(project.env.get("PRE_RELEASE") != null && !project.env.get("PRE_RELEASE").isEmpty()) {
//         versionName = versionName + "-" + project.env.get("PRE_RELEASE")
//     }
    
//     if (project.env.get("RELEASE_NUMBER") != null) {
//         versionName = versionName + "." + project.env.get("RELEASE_NUMBER")
//     }
    
//     return versionName
// }

// dependencies {
//     // The version of react-native is set by the React Native Gradle Plugin
//     implementation("com.facebook.react:react-android")
//     implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.0"
//     implementation project(':react-native-vector-icons')
//     debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
//     debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
//         exclude group:'com.squareup.okhttp3', module:'okhttp'
//     }

//     debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
//     if (hermesEnabled.toBoolean()) {
//         implementation("com.facebook.react:hermes-android")
//     } else {
//         implementation jscFlavor
//     }
// }

// apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// // sentry
// apply from: "../../node_modules/@sentry/react-native/sentry.gradle"
// // React Native vector icon
// apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")